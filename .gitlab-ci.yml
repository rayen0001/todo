stages:
  - lint
  - test
  - dockerize
  - deploy

# Lint Job
lint:
  stage: lint
  image: python:3.9
  script:
    - echo "Installing dependencies for linting..."
    - pip install -r requirements.txt
    - pip install pylint
    - echo "Running linting..."
    - pylint *.py  # Adjust the directory to where your FastAPI code is
  allow_failure: true  # Fail the pipeline if linting fails

# Unit Test Job
unit_test:
  stage: test
  image: python:3.9
  script:
    - echo "Setting up environment..."
    - python -m venv .venv
    - source .venv/bin/activate
    - pip install --upgrade pip
    - pip install -r requirements.txt
    - echo "Running unit tests..."
    - pytest unit_test.py
  artifacts:
    paths:
      - .venv/
    expire_in: 1 hour
  allow_failure: false  # Fail the pipeline if unit tests fail

# Integration Test Job
integration_test:
  stage: test
  image: python:3.9
  script:
    - echo "Setting up environment for integration tests..."
    - python -m venv .venv
    - source .venv/bin/activate
    - pip install --upgrade pip
    - pip install -r requirements.txt
    - echo "Running integration tests..."
    - pytest integration_test.py  
  artifacts:
    paths:
      - .venv/
    expire_in: 1 hour
  allow_failure: false  

dockerize:
  stage: dockerize
  image: docker:20.10.23
  services:
    - docker:20.10.23-dind
  before_script:
    # Login to DockerHub
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
  script:
    # Build the Docker image
    - docker build -t $DOCKER_USERNAME/todo-app:latest .
    # Push the Docker image
    - docker push $DOCKER_USERNAME/todo-app:latest
  after_script:
    # Save Docker image digest
    - docker inspect $DOCKER_USERNAME/todo-app:latest --format='{{index .RepoDigests 0}}' > image-digest.txt || echo "No digest available"
  artifacts:
    paths:
      - image-digest.txt
    expire_in: 1 week
  only:
    - main 


deploy:
  stage: deploy
  image: ubuntu:latest
  before_script:
   - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
   - eval $(ssh-agent -s)
   - mkdir -p ~/.ssh
   - echo "$EC2_SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/test.pem
   - chmod 600 ~/.ssh/test.pem
  script:
    - ssh -T -o StrictHostKeyChecking=no -i ~/.ssh/test.pem ec2-user@ec2-34-226-207-246.compute-1.amazonaws.com "sudo docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD" "
    - ssh -T -o StrictHostKeyChecking=no -i ~/.ssh/test.pem ec2-user@ec2-34-226-207-246.compute-1.amazonaws.com "sudo docker pull $DOCKER_USERNAME/todo-app:latest"
    - ssh -T -o StrictHostKeyChecking=no -i ~/.ssh/test.pem ec2-user@ec2-34-226-207-246.compute-1.amazonaws.com "sudo docker run -itd -p 8000:80 $DOCKER_USERNAME/todo-app:latestt"

  only:
    - main
