stages:
  - lint
  - test
  - dockerize
#   - deploy

# Lint Job
lint:
  stage: lint
  image: python:3.9
  script:
    - echo "Installing dependencies for linting..."
    - pip install -r requirements.txt
    - pip install pylint
    - echo "Running linting..."
    - pylint *.py  # Adjust the directory to where your FastAPI code is
  allow_failure: true  # Fail the pipeline if linting fails

# Unit Test Job
unit_test:
  stage: test
  image: python:3.9
  script:
    - echo "Setting up environment..."
    - python -m venv .venv
    - source .venv/bin/activate
    - pip install --upgrade pip
    - pip install -r requirements.txt
    - echo "Running unit tests..."
    - pytest Unit_test.py
  artifacts:
    paths:
      - .venv/
    expire_in: 1 hour
  allow_failure: false  # Fail the pipeline if unit tests fail

# Integration Test Job
integration_test:
  stage: test
  image: python:3.9
  script:
    - echo "Setting up environment for integration tests..."
    - python -m venv .venv
    - source .venv/bin/activate
    - pip install --upgrade pip
    - pip install -r requirements.txt
    - echo "Running integration tests..."
    - pytest Integration_test.py  
  artifacts:
    paths:
      - .venv/
    expire_in: 1 hour
  allow_failure: false  

dockerize:
  stage: dockerize
  image: docker:20.10.23
  services:
    - docker:20.10.23-dind
  before_script:
    # Login to DockerHub
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
  script:
    # Build the Docker image
    - docker build -t $DOCKER_USERNAME/todo-app:latest .
    # Push the Docker image
    - docker push $DOCKER_USERNAME/todo-app:latest
  after_script:
    # Save Docker image digest
    - docker inspect $DOCKER_USERNAME/todo-app:latest --format='{{index .RepoDigests 0}}' > image-digest.txt || echo "No digest available"
  artifacts:
    paths:
      - image-digest.txt
    expire_in: 1 week
  only:
    - main 

# # Deploy to EC2 Instance
# deploy:
#   stage: deploy
#   image: appleboy/drone-ssh  # Use Docker image with SSH support
#   script:
#     - echo "Deploying to EC2 instance..."
#     - ssh -o StrictHostKeyChecking=no -i $EC2_SSH_KEY_PATH ec2-user@$EC2_IP_ADDRESS "docker pull $CI_REGISTRY/$CI_PROJECT_NAME:$CI_COMMIT_SHA && docker run -d -p 80:80 $CI_REGISTRY/$CI_PROJECT_NAME:$CI_COMMIT_SHA"
#   only:
#     - main  # Deploy only from the main branch
#   environment:
#     name: production
#     url: http://$EC2_IP_ADDRESS
